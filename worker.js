const COOKIE_QUOTE = 'quote'
const COOKIE_NAME = 'name'

const html = `<!DOCTYPE html>
<body>
  <h1>Hello World</h1>
  <p>This markup was generated by a Cloudflare Worker.</p>
  <script>
   const name = "Jacob Gro√ü";
   const quote = "Think smarter";
  </script>
  <script src="https://cf.kurtextrem672.workers.dev/"></script>
</body>`

const cookieJS = `
async function fetchAndPrint() {
  try {
    const res = await fetch('', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ name, quote })
    })
    const json = await res.json()
    console.log(json)
  } catch (e) { console.error(e) }
}
fetchAndPrint()
`

const getCookieStr = (k,v) => `${k}=${v}; path=/; max-age=2147483647` // maximum value compatible with 32 bits systems

async function handleRequest(request) {
  // handle fetch req
  if (request.method === 'POST') {
    const response = new Response(JSON.stringify({ ip: request.headers.get('CF-Connecting-IP') }), {
      headers: {
        'content-type': 'application/json',
      },
    })
    const json = await request.json()
    response.headers.set('set-cookie',  getCookieStr(COOKIE_NAME, json[COOKIE_NAME]))
    response.headers.append('set-cookie', getCookieStr(COOKIE_QUOTE, json[COOKIE_QUOTE]))
    return response 
  }

  const requestType = request.headers.get('sec-fetch-dest')

  // if req isn't initiated from the script tag, output the default html
  if (requestType !== 'script' || !request.headers.get('accept').startsWith('*/*'))
    return new Response(html, {
      headers: {
        'content-type': 'text/html;charset=UTF-8',
      },
    })

  const cookieString = request.headers.get('Cookie')
  const nameValue = getCookie(cookieString, COOKIE_NAME)
  const quoteValue = getCookie(cookieString, COOKIE_QUOTE)

  if (nameValue !== null && quoteValue !== null)
    return new Response(`console.log(${JSON.stringify(nameValue)},${JSON.stringify(quoteValue)})`, {
      headers: { 'content-type': 'text/javascript' }
    })

  return new Response(cookieJS, {
    headers: { 'content-type': 'text/javascript' }
  })
}

addEventListener('fetch', event => {
  return event.respondWith(handleRequest(event.request))
})

function getCookie(cookieString, key) {
  if (cookieString) {
    const allCookies = cookieString.split('; ')
    const targetCookie = allCookies.find(cookie => cookie.includes(key))
    if (targetCookie) {
      const [_, value] = targetCookie.split('=')
      return value
    }
  }
  return null
}